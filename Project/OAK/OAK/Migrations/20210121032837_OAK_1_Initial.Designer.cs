// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OAK;

namespace OAK.Migrations
{
    [DbContext(typeof(OAKContext))]
    [Migration("20210121032837_OAK_1_Initial")]
    partial class OAK_1_Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("OAK.ArtImage", b =>
                {
                    b.Property<long>("Idarticle")
                        .HasColumnType("bigint")
                        .HasColumnName("IDARTICLE");

                    b.Property<short>("Number")
                        .HasColumnType("smallint")
                        .HasColumnName("NUMBER");

                    b.Property<Guid>("Idimage")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDIMAGE");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("IMAGE");

                    b.HasKey("Idarticle", "Number")
                        .HasName("PK__ART_IMAG__2CA2BCC3E9F2402D");

                    b.HasIndex(new[] { "Idimage" }, "UQ__ART_IMAG__D85382DAEBE9295E")
                        .IsUnique();

                    b.ToTable("ART_IMAGES");
                });

            modelBuilder.Entity("OAK.ArtSubtitle", b =>
                {
                    b.Property<long>("Idarticle")
                        .HasColumnType("bigint")
                        .HasColumnName("IDARTICLE");

                    b.Property<short>("Number")
                        .HasColumnType("smallint")
                        .HasColumnName("NUMBER");

                    b.Property<Guid>("Idsubtitle")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDSUBTITLE");

                    b.Property<byte[]>("Subtitle")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("SUBTITLE");

                    b.HasKey("Idarticle", "Number")
                        .HasName("PK__ART_SUBT__2CA2BCC34EC62D80");

                    b.HasIndex(new[] { "Idsubtitle" }, "UQ__ART_SUBT__D2F7C979136CD517")
                        .IsUnique();

                    b.ToTable("ART_SUBTITLES");
                });

            modelBuilder.Entity("OAK.ArtText", b =>
                {
                    b.Property<long>("Idarticle")
                        .HasColumnType("bigint")
                        .HasColumnName("IDARTICLE");

                    b.Property<short>("Number")
                        .HasColumnType("smallint")
                        .HasColumnName("NUMBER");

                    b.Property<Guid>("Idtext")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDTEXT");

                    b.Property<byte[]>("Text")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("TEXT");

                    b.HasKey("Idarticle", "Number")
                        .HasName("PK__ART_TEXT__2CA2BCC3421BA1CB");

                    b.HasIndex(new[] { "Idtext" }, "UQ__ART_TEXT__98C742825A1C50E4")
                        .IsUnique();

                    b.ToTable("ART_TEXTS");
                });

            modelBuilder.Entity("OAK.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE");

                    b.Property<long?>("Idautor")
                        .HasColumnType("bigint")
                        .HasColumnName("IDAUTOR");

                    b.Property<long>("Idsection")
                        .HasColumnType("bigint")
                        .HasColumnName("IDSECTION");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("Idautor");

                    b.HasIndex("Idsection");

                    b.ToTable("ARTICLES");
                });

            modelBuilder.Entity("OAK.Autor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Avatar")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("AVATAR");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("EMAIL");

                    b.Property<Guid>("Idavatar")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDAVATAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("NAME");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("STATUS")
                        .HasDefaultValueSql("('No status')");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "UQ__AUTORS__161CF7242BA1BD92")
                        .IsUnique();

                    b.HasIndex(new[] { "Idavatar" }, "UQ__AUTORS__86F9C663321D88B5")
                        .IsUnique();

                    b.HasIndex(new[] { "Password" }, "UQ__AUTORS__93DCC1BE599C6D8C")
                        .IsUnique();

                    b.ToTable("AUTORS");
                });

            modelBuilder.Entity("OAK.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE");

                    b.Property<long>("Idarticle")
                        .HasColumnType("bigint")
                        .HasColumnName("IDARTICLE");

                    b.Property<long>("Idautor")
                        .HasColumnType("bigint")
                        .HasColumnName("IDAUTOR");

                    b.Property<long?>("Idparent")
                        .HasColumnType("bigint")
                        .HasColumnName("IDPARENT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Idarticle");

                    b.HasIndex("Idautor");

                    b.HasIndex("Idparent");

                    b.ToTable("COMMENTS");
                });

            modelBuilder.Entity("OAK.FavArticle", b =>
                {
                    b.Property<long>("Idautor")
                        .HasColumnType("bigint")
                        .HasColumnName("IDAUTOR");

                    b.Property<long>("Idarticle")
                        .HasColumnType("bigint")
                        .HasColumnName("IDARTICLE");

                    b.HasKey("Idautor", "Idarticle")
                        .HasName("PK__FAV_ARTI__2F2950A426EA767F");

                    b.HasIndex("Idarticle");

                    b.ToTable("FAV_ARTICLES");
                });

            modelBuilder.Entity("OAK.FavAutor", b =>
                {
                    b.Property<long>("Idautororigin")
                        .HasColumnType("bigint")
                        .HasColumnName("IDAUTORORIGIN");

                    b.Property<long>("Idautorfavorite")
                        .HasColumnType("bigint")
                        .HasColumnName("IDAUTORFAVORITE");

                    b.HasKey("Idautororigin", "Idautorfavorite")
                        .HasName("PK__FAV_AUTO__06B014F80E14F697");

                    b.HasIndex("Idautorfavorite");

                    b.ToTable("FAV_AUTORS");
                });

            modelBuilder.Entity("OAK.FavSection", b =>
                {
                    b.Property<long>("Idautor")
                        .HasColumnType("bigint")
                        .HasColumnName("IDAUTOR");

                    b.Property<long>("Idsection")
                        .HasColumnType("bigint")
                        .HasColumnName("IDSECTION");

                    b.HasKey("Idautor", "Idsection")
                        .HasName("PK__FAV_SECT__8A717D0B9CC6ED5C");

                    b.HasIndex("Idsection");

                    b.ToTable("FAV_SECTIONS");
                });

            modelBuilder.Entity("OAK.Section", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<long?>("Idautor")
                        .HasColumnType("bigint")
                        .HasColumnName("IDAUTOR");

                    b.Property<long?>("Idparent")
                        .HasColumnType("bigint")
                        .HasColumnName("IDPARENT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("Idautor");

                    b.HasIndex("Idparent");

                    b.ToTable("SECTIONS");
                });

            modelBuilder.Entity("OAK.ArtImage", b =>
                {
                    b.HasOne("OAK.Article", "IdarticleNavigation")
                        .WithMany("ArtImages")
                        .HasForeignKey("Idarticle")
                        .HasConstraintName("FK_ART_IMAGES_TO_ARTICLE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdarticleNavigation");
                });

            modelBuilder.Entity("OAK.ArtSubtitle", b =>
                {
                    b.HasOne("OAK.Article", "IdarticleNavigation")
                        .WithMany("ArtSubtitles")
                        .HasForeignKey("Idarticle")
                        .HasConstraintName("FK_ART_SUBTITLES_TO_ARTICLE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdarticleNavigation");
                });

            modelBuilder.Entity("OAK.ArtText", b =>
                {
                    b.HasOne("OAK.Article", "IdarticleNavigation")
                        .WithMany("ArtTexts")
                        .HasForeignKey("Idarticle")
                        .HasConstraintName("FK_ART_TEXT_TO_ARTICLE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdarticleNavigation");
                });

            modelBuilder.Entity("OAK.Article", b =>
                {
                    b.HasOne("OAK.Autor", "IdautorNavigation")
                        .WithMany("Articles")
                        .HasForeignKey("Idautor")
                        .HasConstraintName("FK_ARTICLES_TO_AUTOR")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OAK.Section", "IdsectionNavigation")
                        .WithMany("Articles")
                        .HasForeignKey("Idsection")
                        .HasConstraintName("FK_ARTICLES_TO_SECTIONS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdautorNavigation");

                    b.Navigation("IdsectionNavigation");
                });

            modelBuilder.Entity("OAK.Comment", b =>
                {
                    b.HasOne("OAK.Article", "IdarticleNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("Idarticle")
                        .HasConstraintName("FK_COMMENTS_TO_ARTICLE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Autor", "IdautorNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("Idautor")
                        .HasConstraintName("FK_COMMENTS_TO_AUTOR")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Comment", "IdparentNavigation")
                        .WithMany("InverseIdparentNavigation")
                        .HasForeignKey("Idparent")
                        .HasConstraintName("FK_COMMENTS_TO_COMMENT");

                    b.Navigation("IdarticleNavigation");

                    b.Navigation("IdautorNavigation");

                    b.Navigation("IdparentNavigation");
                });

            modelBuilder.Entity("OAK.FavArticle", b =>
                {
                    b.HasOne("OAK.Article", "IdarticleNavigation")
                        .WithMany("FavArticles")
                        .HasForeignKey("Idarticle")
                        .HasConstraintName("FK__FAV_ARTIC__IDART__5224328E")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Autor", "IdautorNavigation")
                        .WithMany("FavArticles")
                        .HasForeignKey("Idautor")
                        .HasConstraintName("FK_FAV_ARTICLES_TO_AUTORS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdarticleNavigation");

                    b.Navigation("IdautorNavigation");
                });

            modelBuilder.Entity("OAK.FavAutor", b =>
                {
                    b.HasOne("OAK.Autor", "IdautorfavoriteNavigation")
                        .WithMany("FavAutorIdautorfavoriteNavigations")
                        .HasForeignKey("Idautorfavorite")
                        .HasConstraintName("FK__FAV_AUTOR__IDAUT__4E53A1AA")
                        .IsRequired();

                    b.HasOne("OAK.Autor", "IdautororiginNavigation")
                        .WithMany("FavAutorIdautororiginNavigations")
                        .HasForeignKey("Idautororigin")
                        .HasConstraintName("FK_FAV_AUTORS_TO_AUTORS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdautorfavoriteNavigation");

                    b.Navigation("IdautororiginNavigation");
                });

            modelBuilder.Entity("OAK.FavSection", b =>
                {
                    b.HasOne("OAK.Autor", "IdautorNavigation")
                        .WithMany("FavSections")
                        .HasForeignKey("Idautor")
                        .HasConstraintName("FK_FAV_SECTIONS_TO_AUTORS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAK.Section", "IdsectionNavigation")
                        .WithMany("FavSections")
                        .HasForeignKey("Idsection")
                        .HasConstraintName("FK__FAV_SECTI__IDSEC__55F4C372")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdautorNavigation");

                    b.Navigation("IdsectionNavigation");
                });

            modelBuilder.Entity("OAK.Section", b =>
                {
                    b.HasOne("OAK.Autor", "IdautorNavigation")
                        .WithMany("Sections")
                        .HasForeignKey("Idautor")
                        .HasConstraintName("FK_SECTIONS_TO_AUTOR")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OAK.Section", "IdparentNavigation")
                        .WithMany("InverseIdparentNavigation")
                        .HasForeignKey("Idparent")
                        .HasConstraintName("FK_SECTIONS_TO_SECTION");

                    b.Navigation("IdautorNavigation");

                    b.Navigation("IdparentNavigation");
                });

            modelBuilder.Entity("OAK.Article", b =>
                {
                    b.Navigation("ArtImages");

                    b.Navigation("ArtSubtitles");

                    b.Navigation("ArtTexts");

                    b.Navigation("Comments");

                    b.Navigation("FavArticles");
                });

            modelBuilder.Entity("OAK.Autor", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comments");

                    b.Navigation("FavArticles");

                    b.Navigation("FavAutorIdautorfavoriteNavigations");

                    b.Navigation("FavAutorIdautororiginNavigations");

                    b.Navigation("FavSections");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("OAK.Comment", b =>
                {
                    b.Navigation("InverseIdparentNavigation");
                });

            modelBuilder.Entity("OAK.Section", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("FavSections");

                    b.Navigation("InverseIdparentNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
